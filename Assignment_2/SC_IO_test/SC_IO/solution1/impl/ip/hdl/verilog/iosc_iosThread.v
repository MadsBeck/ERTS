// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module iosc_iosThread (
        ap_clk,
        ap_rst,
        ctrl,
        inSwitch,
        outLeds,
        outLeds_ap_vld,
        timer,
        iosc_switchs_V,
        iosc_switchs_V_ap_vld
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input  [3:0] ctrl;
input  [3:0] inSwitch;
output  [3:0] outLeds;
output   outLeds_ap_vld;
input   timer;
output  [3:0] iosc_switchs_V;
output   iosc_switchs_V_ap_vld;

reg[3:0] outLeds;
reg outLeds_ap_vld;
reg iosc_switchs_V_ap_vld;

wire   [7:0] v_assign_fu_140_p3;
reg   [7:0] v_assign_reg_193;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_2_fu_149_p2;
reg   [0:0] tmp_2_reg_199;
wire   [0:0] tmp_1_read_fu_102_p2;
reg   [0:0] tmp_1_reg_203;
reg   [7:0] count_fu_86;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state4;
wire   [7:0] count_2_fu_175_p2;
wire   [3:0] v_V_2_fu_155_p1;
wire   [3:0] v_V_1_fu_160_p2;
wire   [3:0] r_V_fu_167_p2;
wire   [0:0] tmp_fu_134_p2;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_2_reg_199 == 1'd1) & (tmp_1_reg_203 == 1'd1))) begin
        count_fu_86 <= count_2_fu_175_p2;
    end else if (((1'b1 == ap_CS_fsm_state4) & (tmp_2_reg_199 == 1'd0))) begin
        count_fu_86 <= v_assign_reg_193;
    end else if (((1'b1 == ap_CS_fsm_state3) & (tmp_2_fu_149_p2 == 1'd1) & (tmp_1_read_fu_102_p2 == 1'd0))) begin
        count_fu_86 <= v_assign_fu_140_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        count_fu_86 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_2_fu_149_p2 == 1'd1))) begin
        tmp_1_reg_203 <= timer;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_2_reg_199 <= tmp_2_fu_149_p2;
        v_assign_reg_193 <= v_assign_fu_140_p3;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_2_reg_199 == 1'd0))) begin
        iosc_switchs_V_ap_vld = 1'b1;
    end else begin
        iosc_switchs_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_2_reg_199 == 1'd0))) begin
        outLeds = r_V_fu_167_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (tmp_2_fu_149_p2 == 1'd1) & (tmp_1_read_fu_102_p2 == 1'd1))) begin
        outLeds = v_V_1_fu_160_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (tmp_2_fu_149_p2 == 1'd1) & (tmp_1_read_fu_102_p2 == 1'd0))) begin
        outLeds = v_V_2_fu_155_p1;
    end else begin
        outLeds = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (tmp_2_fu_149_p2 == 1'd1) & (tmp_1_read_fu_102_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state4) & (tmp_2_reg_199 == 1'd0)) | ((1'b1 == ap_CS_fsm_state3) & (tmp_2_fu_149_p2 == 1'd1) & (tmp_1_read_fu_102_p2 == 1'd1)))) begin
        outLeds_ap_vld = 1'b1;
    end else begin
        outLeds_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign count_2_fu_175_p2 = (v_assign_reg_193 + 8'd1);

assign iosc_switchs_V = (ctrl & inSwitch);

assign r_V_fu_167_p2 = (ctrl & inSwitch);

assign tmp_1_read_fu_102_p2 = timer;

assign tmp_2_fu_149_p2 = ((ctrl == 4'd0) ? 1'b1 : 1'b0);

assign tmp_fu_134_p2 = ((inSwitch == 4'd8) ? 1'b1 : 1'b0);

assign v_V_1_fu_160_p2 = (v_V_2_fu_155_p1 + 4'd1);

assign v_V_2_fu_155_p1 = v_assign_fu_140_p3[3:0];

assign v_assign_fu_140_p3 = ((tmp_fu_134_p2[0:0] === 1'b1) ? 8'd0 : count_fu_86);

endmodule //iosc_iosThread

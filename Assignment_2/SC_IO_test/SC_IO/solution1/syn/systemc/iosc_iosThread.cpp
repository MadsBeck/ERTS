// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "iosc_iosThread.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic iosc_iosThread::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic iosc_iosThread::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> iosc_iosThread::ap_ST_fsm_state1 = "1";
const sc_lv<4> iosc_iosThread::ap_ST_fsm_state2 = "10";
const sc_lv<4> iosc_iosThread::ap_ST_fsm_state3 = "100";
const sc_lv<4> iosc_iosThread::ap_ST_fsm_state4 = "1000";
const sc_lv<32> iosc_iosThread::ap_const_lv32_2 = "10";
const sc_lv<1> iosc_iosThread::ap_const_lv1_1 = "1";
const sc_lv<8> iosc_iosThread::ap_const_lv8_0 = "00000000";
const sc_lv<32> iosc_iosThread::ap_const_lv32_1 = "1";
const sc_lv<1> iosc_iosThread::ap_const_lv1_0 = "0";
const sc_lv<32> iosc_iosThread::ap_const_lv32_3 = "11";
const sc_lv<4> iosc_iosThread::ap_const_lv4_8 = "1000";
const sc_lv<4> iosc_iosThread::ap_const_lv4_0 = "0000";
const sc_lv<4> iosc_iosThread::ap_const_lv4_1 = "1";
const sc_lv<8> iosc_iosThread::ap_const_lv8_1 = "1";
const bool iosc_iosThread::ap_const_boolean_1 = true;

iosc_iosThread::iosc_iosThread(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_count_2_fu_175_p2);
    sensitive << ( v_assign_reg_193 );

    SC_METHOD(thread_iosc_switchs_V);
    sensitive << ( ctrl );
    sensitive << ( inSwitch );
    sensitive << ( tmp_2_reg_199 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_iosc_switchs_V_ap_vld);
    sensitive << ( tmp_2_reg_199 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_outLeds);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_2_fu_149_p2 );
    sensitive << ( tmp_2_reg_199 );
    sensitive << ( tmp_1_read_fu_102_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( v_V_2_fu_155_p1 );
    sensitive << ( v_V_1_fu_160_p2 );
    sensitive << ( r_V_fu_167_p2 );

    SC_METHOD(thread_outLeds_ap_vld);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_2_fu_149_p2 );
    sensitive << ( tmp_2_reg_199 );
    sensitive << ( tmp_1_read_fu_102_p2 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_r_V_fu_167_p2);
    sensitive << ( ctrl );
    sensitive << ( inSwitch );

    SC_METHOD(thread_tmp_1_read_fu_102_p2);
    sensitive << ( timer );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_2_fu_149_p2 );

    SC_METHOD(thread_tmp_2_fu_149_p2);
    sensitive << ( ctrl );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_tmp_fu_134_p2);
    sensitive << ( inSwitch );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_v_V_1_fu_160_p2);
    sensitive << ( v_V_2_fu_155_p1 );

    SC_METHOD(thread_v_V_2_fu_155_p1);
    sensitive << ( v_assign_fu_140_p3 );

    SC_METHOD(thread_v_assign_fu_140_p3);
    sensitive << ( count_fu_86 );
    sensitive << ( tmp_fu_134_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );

    ap_CS_fsm = "0001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "iosc_iosThread_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ctrl, "(port)ctrl");
    sc_trace(mVcdFile, inSwitch, "(port)inSwitch");
    sc_trace(mVcdFile, outLeds, "(port)outLeds");
    sc_trace(mVcdFile, outLeds_ap_vld, "(port)outLeds_ap_vld");
    sc_trace(mVcdFile, timer, "(port)timer");
    sc_trace(mVcdFile, iosc_switchs_V, "(port)iosc_switchs_V");
    sc_trace(mVcdFile, iosc_switchs_V_ap_vld, "(port)iosc_switchs_V_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, v_assign_fu_140_p3, "v_assign_fu_140_p3");
    sc_trace(mVcdFile, v_assign_reg_193, "v_assign_reg_193");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_2_fu_149_p2, "tmp_2_fu_149_p2");
    sc_trace(mVcdFile, tmp_2_reg_199, "tmp_2_reg_199");
    sc_trace(mVcdFile, tmp_1_read_fu_102_p2, "tmp_1_read_fu_102_p2");
    sc_trace(mVcdFile, tmp_1_reg_203, "tmp_1_reg_203");
    sc_trace(mVcdFile, count_fu_86, "count_fu_86");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, count_2_fu_175_p2, "count_2_fu_175_p2");
    sc_trace(mVcdFile, v_V_2_fu_155_p1, "v_V_2_fu_155_p1");
    sc_trace(mVcdFile, v_V_1_fu_160_p2, "v_V_1_fu_160_p2");
    sc_trace(mVcdFile, r_V_fu_167_p2, "r_V_fu_167_p2");
    sc_trace(mVcdFile, tmp_fu_134_p2, "tmp_fu_134_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

iosc_iosThread::~iosc_iosThread() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void iosc_iosThread::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(tmp_2_reg_199.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(tmp_1_reg_203.read(), ap_const_lv1_1))) {
        count_fu_86 = count_2_fu_175_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(tmp_2_reg_199.read(), ap_const_lv1_0))) {
        count_fu_86 = v_assign_reg_193.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(tmp_2_fu_149_p2.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(tmp_1_read_fu_102_p2.read(), ap_const_lv1_0))) {
        count_fu_86 = v_assign_fu_140_p3.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        count_fu_86 = ap_const_lv8_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(tmp_2_fu_149_p2.read(), ap_const_lv1_1))) {
        tmp_1_reg_203 =  (sc_lv<1>) (timer.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        tmp_2_reg_199 = tmp_2_fu_149_p2.read();
        v_assign_reg_193 = v_assign_fu_140_p3.read();
    }
}

void iosc_iosThread::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void iosc_iosThread::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void iosc_iosThread::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void iosc_iosThread::thread_count_2_fu_175_p2() {
    count_2_fu_175_p2 = (!v_assign_reg_193.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(v_assign_reg_193.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void iosc_iosThread::thread_iosc_switchs_V() {
    iosc_switchs_V = (ctrl.read() & inSwitch.read());
}

void iosc_iosThread::thread_iosc_switchs_V_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(tmp_2_reg_199.read(), ap_const_lv1_0))) {
        iosc_switchs_V_ap_vld = ap_const_logic_1;
    } else {
        iosc_switchs_V_ap_vld = ap_const_logic_0;
    }
}

void iosc_iosThread::thread_outLeds() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(tmp_2_reg_199.read(), ap_const_lv1_0))) {
        outLeds = r_V_fu_167_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(tmp_2_fu_149_p2.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(tmp_1_read_fu_102_p2.read(), ap_const_lv1_1))) {
        outLeds = v_V_1_fu_160_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(tmp_2_fu_149_p2.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(tmp_1_read_fu_102_p2.read(), ap_const_lv1_0))) {
        outLeds = v_V_2_fu_155_p1.read();
    } else {
        outLeds = "XXXX";
    }
}

void iosc_iosThread::thread_outLeds_ap_vld() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(tmp_2_fu_149_p2.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(tmp_1_read_fu_102_p2.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(tmp_2_reg_199.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(tmp_2_fu_149_p2.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(tmp_1_read_fu_102_p2.read(), ap_const_lv1_1)))) {
        outLeds_ap_vld = ap_const_logic_1;
    } else {
        outLeds_ap_vld = ap_const_logic_0;
    }
}

void iosc_iosThread::thread_r_V_fu_167_p2() {
    r_V_fu_167_p2 = (ctrl.read() & inSwitch.read());
}

void iosc_iosThread::thread_tmp_1_read_fu_102_p2() {
    tmp_1_read_fu_102_p2 =  (sc_lv<1>) (timer.read());
}

void iosc_iosThread::thread_tmp_2_fu_149_p2() {
    tmp_2_fu_149_p2 = (!ctrl.read().is_01() || !ap_const_lv4_0.is_01())? sc_lv<1>(): sc_lv<1>(ctrl.read() == ap_const_lv4_0);
}

void iosc_iosThread::thread_tmp_fu_134_p2() {
    tmp_fu_134_p2 = (!inSwitch.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(inSwitch.read() == ap_const_lv4_8);
}

void iosc_iosThread::thread_v_V_1_fu_160_p2() {
    v_V_1_fu_160_p2 = (!v_V_2_fu_155_p1.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(v_V_2_fu_155_p1.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void iosc_iosThread::thread_v_V_2_fu_155_p1() {
    v_V_2_fu_155_p1 = v_assign_fu_140_p3.read().range(4-1, 0);
}

void iosc_iosThread::thread_v_assign_fu_140_p3() {
    v_assign_fu_140_p3 = (!tmp_fu_134_p2.read()[0].is_01())? sc_lv<8>(): ((tmp_fu_134_p2.read()[0].to_bool())? ap_const_lv8_0: count_fu_86.read());
}

void iosc_iosThread::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

}


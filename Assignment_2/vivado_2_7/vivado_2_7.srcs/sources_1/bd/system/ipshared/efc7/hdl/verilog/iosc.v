// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="iosc,hls_ip_2017_2,{HLS_INPUT_TYPE=sc,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.516000,HLS_SYN_LAT=3,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=209,HLS_SYN_LUT=205}" *)

module iosc (
        clk,
        reset,
        ctrl,
        inSwitch,
        outLeds
);


input   clk;
input   reset;
input  [3:0] ctrl;
input  [3:0] inSwitch;
output  [3:0] outLeds;

reg[3:0] outLeds;

wire   [0:0] iosc_ssdm_thread_s_load_fu_110_p1;
wire   [1:0] ap_CS_fsm;
wire    grp_iosc_timeThread_fu_74_timer;
wire    grp_iosc_timeThread_fu_74_timer_ap_vld;
wire   [3:0] grp_iosc_iosThread_fu_92_outLeds;
wire    grp_iosc_iosThread_fu_92_outLeds_ap_vld;
wire    grp_iosc_iosThread_fu_92_timer;
wire   [3:0] grp_iosc_iosThread_fu_92_iosc_switchs_V;
wire    grp_iosc_iosThread_fu_92_iosc_switchs_V_ap_vld;
wire    ap_CS_fsm_state2;
reg   [0:0] timer;

iosc_timeThread grp_iosc_timeThread_fu_74(
    .ap_clk(clk),
    .ap_rst(reset),
    .timer(grp_iosc_timeThread_fu_74_timer),
    .timer_ap_vld(grp_iosc_timeThread_fu_74_timer_ap_vld)
);

iosc_iosThread grp_iosc_iosThread_fu_92(
    .ap_clk(clk),
    .ap_rst(reset),
    .ctrl(ctrl),
    .inSwitch(inSwitch),
    .outLeds(grp_iosc_iosThread_fu_92_outLeds),
    .outLeds_ap_vld(grp_iosc_iosThread_fu_92_outLeds_ap_vld),
    .timer(grp_iosc_iosThread_fu_92_timer),
    .iosc_switchs_V(grp_iosc_iosThread_fu_92_iosc_switchs_V),
    .iosc_switchs_V_ap_vld(grp_iosc_iosThread_fu_92_iosc_switchs_V_ap_vld)
);

always @ (posedge clk) begin
    if ((1'b1 == grp_iosc_iosThread_fu_92_outLeds_ap_vld)) begin
        outLeds <= grp_iosc_iosThread_fu_92_outLeds;
    end
end

always @ (posedge clk) begin
    if ((1'b1 == grp_iosc_timeThread_fu_74_timer_ap_vld)) begin
        timer <= grp_iosc_timeThread_fu_74_timer;
    end
end

assign ap_CS_fsm = 2'd0;

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign grp_iosc_iosThread_fu_92_timer = timer;

assign iosc_ssdm_thread_s_load_fu_110_p1 = 1'd0;

endmodule //iosc

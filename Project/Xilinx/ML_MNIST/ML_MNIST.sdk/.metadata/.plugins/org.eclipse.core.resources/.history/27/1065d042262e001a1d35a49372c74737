#include "FileSDCard.h"
#include <stdint.h>
#include <stdio.h>
#include <cstdio>
#include <string>
#include "xil_types.h"

#define HEIGHT 28
#define WIDTH 28
#define headerBytes 3
#define chunkSize 4

class PreProcesser
{
private:
    static PreProcesser* instance;
    PreProcesser();
	u8 gaussianBlur(u8* pixPtr, u8* upPtr, u8* dwnPtr, u8 i, u8 j, u8 size);
	void loadGrayScaleImagePGM(char* path, u8 img[][28]);
	void downsampling(u8 img[][28], char out[16]);
	FileSDCard reader;
public:

    static PreProcesser* getInstance();


	void runPreProcessing(char* path,char out[16]);


    ~PreProcesser();
};

PreProcesser* PreProcesser::instance = 0;

PreProcesser::PreProcesser()
{
	reader = new FIleSDCard((char*)"0:/");
	reader.mount();
}

PreProcesser::~PreProcesser()
{
}

PreProcesser* PreProcesser::getInstance()
{
    if (instance == 0)
    {
        instance = new PreProcesser();
    }

    return instance;
}

void PreProcesser::runPreProcessing(char* path,char out[16])
{
	u8 image[28][28];
	loadGrayScaleImagePGM(path,image);
	downsampling(image,out);
}


void PreProcesser::loadGrayScaleImagePGM(char* path, u8 img[][28])
{
	// Load header
	//char chPtr[28];
	s8 ch[1];
	reader.open((char*)path,FA_OPEN_EXISTING| FA_READ);
	u8 cnt = 0;
	reader.read((char*)ch,1,1);
	while (cnt < headerBytes)
	{
		do
		{
			reader.read((char*)ch,1,0);
		}while(ch[0] != 0x0A);
		cnt++;

	}

	for (u8 i = 0; i < HEIGHT; i++)
	{
		for (u8 j = 0; j < 28; j++)
		{
			reader.read((char*)ch,1,0);
			img[i][j] = ch[0];
		}
	}
}


void PreProcesser::downsampling(u8 img[][28], char out[16])
{
	u8 temp[14][14];
	for (u8 k = 0; k < HEIGHT / 2; k++) {
		for (u8 l = 0; l < WIDTH / 2; l++) {
			temp[k][l] = gaussianBlur(&img[k * 2][l * 2], &img[k * 2 - 1][l * 2], &img[k * 2 + 1][l * 2], k * 2, l * 2, 28);
		}
	}

	u8 temp2[7][7];
	for (u8 k = 0; k < HEIGHT / 4; k++) {
		for (u8 l = 0; l < WIDTH / 4; l++) {
			temp2[k][l] = gaussianBlur(&temp[k * 2][l * 2], &temp[k * 2 - 1][l * 2], &temp[k * 2 + 1][l * 2], k * 2, l * 2, 14);
		}
	}
	u8 count = 0;
	for (u8 k = 0; k < HEIGHT / 7; k++) {
		for (u8 l = 0; l < WIDTH / 7; l++) {
			out[count++] = (gaussianBlur(&temp2[k * 2][l * 2], &temp2[k * 2 - 1][l * 2], &temp2[k * 2 + 1][l * 2], k * 2, l * 2, 7) > 127) ? 127 :
				(s8)gaussianBlur(&temp2[k * 2][l * 2], &temp2[k * 2 - 1][l * 2], &temp2[k * 2 + 1][l * 2], k * 2, l * 2, 7);
		}
	}
}



u8 PreProcesser::gaussianBlur(u8* pixPtr, u8* upPtr, u8* dwnPtr, u8 i, u8 j, u8 size)
{
	size--;
	u32 sum = 0;
	char edge;


	if (i == 0 && j == 0)
		edge = 5;
	else if (i >= size && j >= size)
		edge = 6;
	else if (i >= size && j == 0)
		edge = 7;
	else if (i == 0 && j >= size)
		edge = 8;
	else if (i == 0)
		edge = 3;
	else if (i >= size)
		edge = 4;
	else if (j == 0)
		edge = 1;
	else if (j >= size)
		edge = 2;
	else
		edge = 0;


	    switch (edge)
	    {
	    case 0:
	        sum += upPtr[-1] * 16;
	        sum += pixPtr[-1] * 24;
	        sum += dwnPtr[-1] * 16;
	
	        sum += upPtr[0] * 24;
	        sum += pixPtr[0] * 36;
	        sum += dwnPtr[0] * 24;
	
	        sum += upPtr[1] * 16;
	        sum += pixPtr[1] * 24;
	        sum += dwnPtr[1] * 16;
	        return sum / 196;
	
	    case 1:
	        sum += upPtr[0] * 24;
	        sum += pixPtr[0] * 36;
	        sum += dwnPtr[0] * 24;
	
	        sum += upPtr[1] * 16;
	        sum += pixPtr[1] * 24;
	        sum += dwnPtr[1] * 16;
	        return sum / 140;
	
	    case 2:
	        sum += upPtr[0] * 24;
	        sum += pixPtr[0] * 36;
	        sum += dwnPtr[0] * 24;
	
	        sum += upPtr[-1] * 16;
	        sum += pixPtr[-1] * 24;
	        sum += dwnPtr[-1] * 16;
	        return sum / 140;
	
	    case 3:
	        sum += pixPtr[-1] * 24;
	        sum += dwnPtr[-1] * 16;
	
	        sum += pixPtr[0] * 36;
	        sum += dwnPtr[0] * 24;
	
	        sum += pixPtr[1] * 24;
	        sum += dwnPtr[1] * 16;
	        return sum / 140;
	
	    case 4:
	        sum += pixPtr[-1] * 24;
	        sum += upPtr[-1] * 16;
	
	        sum += pixPtr[0] * 36;
	        sum += upPtr[0] * 24;
	
	        sum += pixPtr[1] * 24;
	        sum += upPtr[1] * 16;
	        return sum / 140;
	
	    case 5:
	        sum += pixPtr[0] * 36;
	        sum += dwnPtr[0] * 24;
	
	        sum += pixPtr[1] * 24;
	        sum += dwnPtr[1] * 16;
	        return sum / 100;
	
	    case 6:
	        sum += pixPtr[0] * 36;
	        sum += upPtr[0] * 24;
	
	        sum += pixPtr[-1] * 24;
	        sum += upPtr[-1] * 16;
	
	        return sum / 100;
	
	    case 7:
	        sum += pixPtr[0] * 36;
	        sum += upPtr[0] * 24;
	
	        sum += pixPtr[1] * 24;
	        sum += upPtr[1] * 16;
	
	        return sum / 100;
	
	    case 8:
	        sum += pixPtr[0] * 36;
	        sum += dwnPtr[0] * 24;
	
	        sum += pixPtr[-1] * 24;
	        sum += dwnPtr[-1] * 16;
	
	        return sum / 100;
	    }
}



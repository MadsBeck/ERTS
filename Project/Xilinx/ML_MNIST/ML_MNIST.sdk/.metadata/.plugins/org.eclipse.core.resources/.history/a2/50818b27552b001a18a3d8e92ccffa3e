/*
 * Empty C++ Application
 */
#include "xparameters.h"
#include "xgpio.h"
#include "xil_printf.h"
#include "led_ip.h"
#include "xclassify.h"

XGpio btn;
XClassify* nn;
//XClassify_Config* nnCfg;
int main()
{
	//nnCfg = XClassify_LookupConfig(XPAR_CLASSIFY_0_DEVICE_ID);
	//if (XClassify_CfgInitialize(nn,nnCfg))  return XST_FAILURE;

	int Status;
	if (XClassify_Initialize(nn,XPAR_CLASSIFY_0_DEVICE_ID) != XST_SUCCESS) return XST_FAILURE;
	XClassify_Start(nn);
	u32 state;
	u8 check = 0;
	if(XClassify_IsReady(nn))
	{
		xil_printf("Starting program\r\n");
	}
	else
	{
		xil_printf("Not ready\r\n");
		return XST_FAILURE;
	}

	char image[16] = {0, 2, 0, 0, 3, 33, 58, 26, 0, 10, 59, 17, 0, 34, 50, 0};
	Status = XClassify_Write_img_Bytes(nn,0,image,16);

	if(Status != 16)
		xil_printf("didnt write all\r\n");

	while(XClassify_IsDone(nn))
	{}
	xil_printf("is done\r\n");



	while()
	{

	}
	state = XClassify_Get_out_r(&nn);

	LED_IP_mWriteReg(XPAR_LED_IP_S_AXI_BASEADDR,0,state);

	xil_printf("predicted what is shown on LED\r\n");

	xil_printf("got %X",state);


	while (1) {}



		/* Initialize the GPIO driver */
		Status = XGpio_Initialize(&btn,  XPAR_AXI_GPIO_0_DEVICE_ID);
		if (Status != XST_SUCCESS) {
			xil_printf("Gpio Initialization Failed\r\n");
			return XST_FAILURE;
		}




		/* Set the direction for all signals as inputs except the LED output */
		XGpio_SetDataDirection(&btn, 1,~0x00);


		while (1) {
			/* Set the LED to High */
			state = XGpio_DiscreteRead(&btn, 1);
			if(state > 0 and check == 0)
			{
				xil_printf("button pressed\r\n");
				check = 1;
			}
			else
				check = 0;
			/* Clear the LED bit */
			LED_IP_mWriteReg(XPAR_LED_IP_S_AXI_BASEADDR,0,state);

		}

		xil_printf("Successfully ran Gpio Example\r\n");
		return XST_SUCCESS;
}

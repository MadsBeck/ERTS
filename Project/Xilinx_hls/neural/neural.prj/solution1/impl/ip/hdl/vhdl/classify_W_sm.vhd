-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity classify_W_sm_rom is 
    generic(
             dwidth     : integer := 8; 
             awidth     : integer := 9; 
             mem_size    : integer := 320
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of classify_W_sm_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00000100", 1 => "11000000", 2 => "00001111", 3 => "00100100", 
    4 => "00011101", 5 => "01010101", 6 => "11011000", 7 => "00101110", 
    8 => "00001111", 9 => "10110110", 10 => "11011111", 11 => "11011001", 
    12 => "11110000", 13 => "11101010", 14 => "11110001", 15 => "00011000", 
    16 => "00100110", 17 => "00011011", 18 => "01010101", 19 => "00000110", 
    20 => "11001000", 21 => "00010100", 22 => "10111111", 23 => "11010010", 
    24 => "00100011", 25 => "00011000", 26 => "11100000", 27 => "11111111", 
    28 => "00101010", 29 => "00000110", 30 => "11010001", 31 => "00001101", 
    32 => "00111000", 33 => "00010101", 34 => "11101011", 35 => "00110000", 
    36 => "11111101", 37 => "00100011", 38 => "01000000", 39 => "11111000", 
    40 => "10011001", 41 => "00101000", 42 => "00110000", 43 => "00001110", 
    44 => "00010010", 45 => "00001100", 46 => "00000101", 47 => "00101100", 
    48 => "00000110", 49 => "11000011", 50 => "10000001", 51 => "10011011", 
    52 => "11000010", 53 => "11110000", 54 => "11110001", 55 => "00011110", 
    56 => "11111010", 57 => "11011111", 58 => "01010010", 59 => "11011011", 
    60 => "11101111", 61 => "00110100", 62 => "00010000", 63 => "00001111", 
    64 => "00111100", 65 => "00110111", 66 => "00000100", 67 => "11101010", 
    68 => "11010101", 69 => "00110100", 70 => "00010001", 71 => "11101101", 
    72 => "11110100", 73 => "00100110", 74 => "00000010", 75 => "10111111", 
    76 => "11010010", 77 => "11011000", 78 => "00111001", 79 => "11000111", 
    80 => "00100100", 81 => "00110010", 82 => "11111111", 83 => "11110010", 
    84 => "11100100", 85 => "11011000", 86 => "00001101", 87 => "11111111", 
    88 => "11011100", 89 => "00100110", 90 => "10111000", 91 => "10010010", 
    92 => "00011101", 93 => "11100111", 94 => "10110011", 95 => "11011111", 
    96 => "00001001", 97 => "11010010", 98 => "11100111", 99 => "11101011", 
    100 => "11011011", 101 => "00010110", 102 => "00101111", 103 => "00100011", 
    104 => "11111100", 105 => "00000001", 106 => "01000100", 107 => "11000001", 
    108 => "10101110", 109 => "00001011", 110 => "11000010", 111 => "10111110", 
    112 => "11001010", 113 => "01000010", 114 => "11011100", 115 => "00011011", 
    116 => "00000011", 117 => "11111001", 118 => "00001101", 119 => "00000010", 
    120 => "11101111", 121 => "11100100", 122 => "11101000", 123 => "10110111", 
    124 => "00010110", 125 => "11110001", 126 => "00001000", 127 => "11010110", 
    128 => "00011001", 129 => "11110001", 130 => "11001011", 131 => "11111100", 
    132 => "00000101", 133 => "00010000", 134 => "10001000", 135 => "11011100", 
    136 => "00010111", 137 => "01001000", 138 => "00001111", 139 => "11101100", 
    140 => "00010000", 141 => "00111101", 142 => "11101100", 143 => "11010001", 
    144 => "11011101", 145 => "00100000", 146 => "00101000", 147 => "11111100", 
    148 => "00110101", 149 => "10010100", 150 => "00001101", 151 => "00010111", 
    152 => "11101110", 153 => "00111001", 154 => "00001010", 155 => "10101001", 
    156 => "11111001", 157 => "11001111", 158 => "11101000", 159 => "00010110", 
    160 => "11000011", 161 => "11011010", 162 => "11110010", 163 => "11001000", 
    164 => "00011011", 165 => "11010100", 166 => "00000000", 167 => "11011011", 
    168 => "00101111", 169 => "00010011", 170 => "10110101", 171 => "01000000", 
    172 => "00011100", 173 => "11111110", 174 => "00001010", 175 => "11000001", 
    176 => "11111110", 177 => "11011000", 178 => "00100100", 179 => "00010000", 
    180 => "11001000", 181 => "11100010", 182 => "11000000", 183 => "11110100", 
    184 => "00000001", 185 => "00111001", 186 => "00110011", 187 => "00010101", 
    188 => "00111000", 189 => "11001100", 190 => "00100111", 191 => "11000000", 
    192 => "11010111", 193 => "11111110", 194 => "11101110", 195 => "00101010", 
    196 => "00011110", 197 => "00010011", 198 => "10100110", 199 => "11000010", 
    200 => "00000100", 201 => "00011001", 202 => "00001000", 203 => "11000011", 
    204 => "11111000", 205 => "00111010", 206 => "00101101", 207 => "11001101", 
    208 => "00011110", 209 => "01000000", 210 => "01000100", 211 => "00111111", 
    212 => "00011110", 213 => "00010100", 214 => "11100001", 215 => "00000100", 
    216 => "11100010", 217 => "00100011", 218 => "11101000", 219 => "00001010", 
    220 => "11001110", 221 => "11001010", 222 => "11001000", 223 => "00011010", 
    224 => "00111010", 225 => "00000111", 226 => "00011111", 227 => "11111000", 
    228 => "00111100", 229 => "01000010", 230 => "00001110", 231 => "11000001", 
    232 => "00011111", 233 => "11111110", 234 => "00010001", 235 => "00011011", 
    236 => "11110001", 237 => "10111011", 238 => "11001000", 239 => "00000101", 
    240 => "11101101", 241 => "00111010", 242 => "00011100", 243 => "00101011", 
    244 => "11110001", 245 => "10111110", 246 => "11110110", 247 => "00100000", 
    248 => "11011010", 249 => "00001011", 250 => "11110000", 251 => "10011001", 
    252 => "00010011", 253 => "00100110", 254 => "00000001", 255 => "00111001", 
    256 => "00101001", 257 => "11111100", 258 => "00100001", 259 => "00011010", 
    260 => "00010110", 261 => "00011111", 262 => "11110001", 263 => "00001001", 
    264 => "00000011", 265 => "11101000", 266 => "11011000", 267 => "00011110", 
    268 => "11011100", 269 => "11100010", 270 => "11111000", 271 => "11100000", 
    272 => "00011010", 273 => "00001101", 274 => "00100000", 275 => "11101110", 
    276 => "11100011", 277 => "10110101", 278 => "00000111", 279 => "11000010", 
    280 => "00011100", 281 => "11001111", 282 => "00001110", 283 => "11111010", 
    284 => "00110101", 285 => "11010011", 286 => "11111101", 287 => "00101001", 
    288 => "00111111", 289 => "10110101", 290 => "11101101", 291 => "11111010", 
    292 => "11001000", 293 => "11111111", 294 => "11000001", 295 => "11011011", 
    296 => "10011000", 297 => "00110111", 298 => "00110010", 299 => "00111101", 
    300 => "11011001", 301 => "00001001", 302 => "10101100", 303 => "00000001", 
    304 => "00100010", 305 => "11010101", 306 => "00110101", 307 => "01001010", 
    308 => "11111101", 309 => "11100101", 310 => "00001011", 311 => "10111111", 
    312 => "00110111", 313 => "11100001", 314 => "00010100", 315 => "11110110", 
    316 => "11011111", 317 => "00010011", 318 => "11110001", 319 => "11101101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity classify_W_sm is
    generic (
        DataWidth : INTEGER := 8;
        AddressRange : INTEGER := 320;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of classify_W_sm is
    component classify_W_sm_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    classify_W_sm_rom_U :  component classify_W_sm_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


